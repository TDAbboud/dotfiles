source $HOME/.vim/plugins.vim

" Section General {{{
set nocompatible    " not compatible with vi
set autoread        " detect when a file is changed

" make backspace behave in a sane manner
set backspace=indent,eol,start

set history=100     " change history to 100
set textwidth=120

" }}}

" Section User Interface {{{

" Tab control
set tabstop=4       " the visible width of tabs
set softtabstop=4   " edit as if the tabs are 4 characters wide
set shiftwidth=4    " number of spaces to use for indent and unindent
set expandtab


" Enable the mouse
if has('mouse')
    set mouse=a
endif

" Use the system clipboard (doesn't work with neovim)
set clipboard=unnamed

" faster redrawing
set ttyfast

" toggle invisible characters
set listchars=tab:▸\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
" make the highlighting of tabs and other non-text less annoying
highlight SpecialKey ctermbg=none ctermfg=8
highlight NonText ctermbg=none ctermfg=8
" highlight conflicts
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'
" Highlight red when over the length
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%91v.\+/
set showbreak=↪

" code folding settings
set foldmethod=indent " fold based on indent
set foldcolumn=1
set foldnestmax=10 " deepest fold is 10 levels
set nofoldenable " don't fold by default
set foldlevel=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => User Interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set so=8 " set 8 lines to the cursors - when moving vertical
set wildmenu " enhanced command line completion
set hidden " current buffer can be put into background
set showcmd " show incomplete commands
set noshowmode " don't show which mode disabled for PowerLine
set wildmode=list:longest " complete files like a shell
set scrolloff=8 " lines of text around cursor
set shell=$SHELL
set cmdheight=1 " command bar height
set ruler   " show the cursor position all the time
set modeline
" Cursorline on by default
set cursorline


set title " set terminal title

" Searching
set ignorecase          " case insensitive searching
set smartcase           " case-sensitive if expresson contains a capital letter
set hlsearch
set incsearch           " set incremental search, like modern browsers
set nolazyredraw        " don't redraw while executing macros

set showmatch " show matching braces
set mat=2 " how many tenths of a second to blink

" error bells
set noerrorbells
set visualbell
set tm=500

" switch syntax highlighting on
syntax on

if has('vim_starting')
    set encoding=utf-8
endif

let base16colorspace=256  " Access colors present in 256 colorspace"
set t_Co=256 " Explicitly tell vim that the terminal supports 256 colors"
" Set background and theme (environment variables - see .zshrc)
set background=dark
colorscheme Tomorrow-Night-Eighties

set number              " show line numbers
set relativenumber      " show relative line numbers
"set wrap               " turn on line wrapping
"set wrapmargin=8       " wrap lines when coming within n characters from side
set linebreak           " set soft wrapping
set showbreak=…         " show ellipsis at breaking
set autoindent " automatically set indent of new line
set smartindent
set nobackup
set nowritebackup
set noswapfile
set laststatus=2 " show the satus line all the time

" }}}

" Section Mappings {{{

" set a map leader for more key combos
let mapleader = "\<Space>"
let g:mapleader = "\<Space>"

" remap esc
inoremap jk <esc>

" toggle paste mode
map <leader>v :set paste!<cr>

" shortcut to save
nmap <leader>w :w<cr>

" shortcut to quit
nmap <leader>q :q<cr>

" disable Ex mode
noremap Q <NOP>

" Toggle invisible characters
nmap <leader>l :set list!<cr>

" Toggle comments (must highlight first)
map <leader>/ :Commentary<cr>

" Change how you move across splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Copy file to a split
map <silent> <C-h> :call WinMove('h')<cr>
map <silent> <C-j> :call WinMove('j')<cr>
map <silent> <C-k> :call WinMove('k')<cr>
map <silent> <C-l> :call WinMove('l')<cr>

" Sublime stle indentation
"vmap <c-]> >gv " Can't map c-] in terminal vim
"vmap <c-[> <gv
" Textmate style indentation
vmap <leader>[ <gv
vmap <leader>] >gv
nmap <leader>[ <<
nmap <leader>] >>

" Center the screen after next search
nnoremap n nzz
nnoremap N Nzz

" edit ~/.vimrc
map <leader>ev :e! ~/.vimrc<cr>
" edit vim plugins
map <leader>evp :e! ~/.vim/plugins.vim<cr>
" edit gitconfig
map <leader>eg :e! ~/.gitconfig<cr>

" Clear highlighting
noremap <CR> :noh<CR><CR>

" scroll the viewport faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" moving up and down work as you would expect
nnoremap <silent> j gj
nnoremap <silent> k gk
nnoremap <silent> ^ g^
nnoremap <silent> $ g$

" search for word under the cursor
" nnoremap <leader>/ "fyiw :/<c-r>f<cr>

" }}}

" Section AutoGroups {{{

" file type specific settings
augroup configgroup
    autocmd!

    " Set syntax highlighting for various filetypes
    au BufNewFile,BufRead *.ns set syntax=tcl

    " automatically resize panes on resize
    autocmd VimResized * exe 'normal! \<c-w>='
    autocmd BufWritePost .vimrc,.vimrc.local,init.vim source %

    autocmd BufNewFile,BufReadPost *.md set filetype=markdown

    autocmd BufNewFile,BufRead,BufWrite *.md syntax match Comment /\%^---\_.\{-}---$/

augroup END

augroup vimrcEx
    au!
    " For all text files set 'textwidth' to 78 characters.
    autocmd FileType text setlocal textwidth=78
    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    " Also don't do it when the mark is in the first line, that is the default
    " position when opening a file.
    autocmd BufReadPost *
                \ if line("'\"") > 1 && line("'\"") <= line("$") |
                \   exe "normal! g`\"" |
                \ endif
augroup END
" }}}

" Section Functions {{{
" Toggle bitween relative and aboslute line-numbers "
nnoremap <F6> :call ToggleNumbers()<cr>

function! ToggleNumbers()
    if &relativenumber
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunction

" Window movement shortcuts
" move to the window in the direction shown, or create a new window
function! WinMove(key)
    let t:curwin = winnr()
    exec "wincmd ".a:key
    if (t:curwin == winnr())
        if (match(a:key,'[jk]'))
            wincmd v
        else
            wincmd s
        endif
        exec "wincmd ".a:key
    endif
endfunction

" }}}

" Section Plugins {{{

" NERDTree Settings
let NERDTreeShowHidden=1
" Toggle NERDTree
nmap <silent> <leader>k :NERDTreeToggle<cr>

" Airline Options
let g:airline_powerline_fonts=1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme='base16_eighties'
let g:airline#extensions#tabline#enabled = 1        " Enable the list of buffers
let g:airline#extensions#tabline#fnamemod = ':t'    " Show just the filename

let g:SuperTabCrMapping = 0

" Tagbar Settings
let g:tagbar_ctags_bin='/usr/local/Cellar/ctags/5.8_1/bin/ctags'  " Set the path for exhuberant_ctags
" Toggle TagBar
nmap <silent> <leader>d :TagbarToggle<cr>

" CtrlP Settings
nmap <silent> <leader>r :CtrlPBuffer<cr>
nmap <silent> <leader>p :CtrlP<cr>
let g:ctrlp_map='<leader>t'
let g:ctrlp_dotfiles=1
let g:ctrlp_working_path_mode = 'ra'
" only show files that are not ignored by git
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
" search the nearest ancestor that contains .git, .hg, .svn
let g:ctrlp_working_path_mode = 2

" Vim-Go Settings
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
"let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
" Automatically import packages on save
let g:go_fmt_command = "goimports"
"let g:go_list_type = "quickfix"

" }}}

" Section MacVim {{{
if (has("gui_running"))
    set guioptions=egmrt
    set background=dark
    set guifont=Sauce\ Code\ Pro\ Nerd\ Font\ Complete:h11
    let g:airline_left_sep=''
    let g:airline_right_sep=''
    let g:airline_powerline_fonts=0
    let g:airline_theme='base16_eighties'
endif
" }}}

" vim:foldmethod=marker:foldlevel=0
